import * as Notifications from 'expo-notifications';
import { Platform } from 'react-native';
import Constants from 'expo-constants';
import apiService from './api';

// Bildirim ayarlarÄ±nÄ± yapÄ±landÄ±r
Notifications.setNotificationHandler({
  handleNotification: async () => ({
    shouldShowAlert: true,
    shouldPlaySound: true,
    shouldSetBadge: true,
  }),
});

class NotificationService {
  constructor() {
    this.isInitialized = false;
    this.expoPushToken = null;
  }

  // Servisi baÅŸlat
  async initialize() {
    try {
      console.log('ðŸ”” NotificationService: BaÅŸlatÄ±lÄ±yor...');
      
      // Ä°zinleri kontrol et ve al
      const { status: existingStatus } = await Notifications.getPermissionsAsync();
      let finalStatus = existingStatus;
      
      if (existingStatus !== 'granted') {
        console.log('ðŸ”” NotificationService: Ä°zin isteniyor...');
        const { status } = await Notifications.requestPermissionsAsync();
        finalStatus = status;
      }
      
      if (finalStatus !== 'granted') {
        console.log('ðŸ”” NotificationService: Bildirim izni verilmedi');
        return false;
      }
      
      console.log('ðŸ”” NotificationService: Bildirim izni alÄ±ndÄ±');
      
      // Expo push token'Ä± al (sadece production build'de)
      // Development modunda push notification token'a gerek yok
      if (__DEV__) {
        console.log('ðŸ”” NotificationService: Development modu - Push token atlanÄ±yor');
        this.isInitialized = true;
        return true;
      }
      
      // Production build iÃ§in Expo Push Token alma
      let projectId;
      try {
        projectId = Constants.expoConfig?.extra?.eas?.projectId || 
                    Constants.manifest?.extra?.eas?.projectId ||
                    Constants.manifest2?.extra?.expoClient?.extra?.eas?.projectId;
        
        // Sahte/test UUID'leri filtrele
        const testUUIDs = [
          '12345678-1234-1234-1234-123456789abc',
          '00000000-0000-0000-0000-000000000000',
          'your-project-id'
        ];
        
        if (!projectId || testUUIDs.includes(projectId)) {
          console.warn('ðŸ”” NotificationService: GeÃ§erli Project ID bulunamadÄ±');
          projectId = undefined;
        } else {
          console.log('ðŸ”” NotificationService: Project ID bulundu:', projectId);
        }
      } catch (error) {
        console.warn('ðŸ”” NotificationService: Project ID alma hatasÄ±:', error.message);
        projectId = undefined;
      }
      
      // Expo Push Token alma (sadece geÃ§erli projectId varsa)
      if (!projectId) {
        console.warn('ðŸ”” NotificationService: Project ID yok, push notification kullanÄ±lamayacak');
        console.warn('ðŸ”” NotificationService: GerÃ§ek bir EAS projesi oluÅŸturup projectId\'yi app.config.js\'e eklemeniz gerekiyor');
        this.isInitialized = true;
        return true;
      }
      
      try {
        this.expoPushToken = await Notifications.getExpoPushTokenAsync({ projectId });
        console.log('ðŸ”” NotificationService: Expo Push Token alÄ±ndÄ±:', this.expoPushToken.data);
        
        // Token'Ä± backend'e gÃ¶nder
        if (this.expoPushToken?.data) {
          await this.sendTokenToBackend(this.expoPushToken.data);
        }
      } catch (tokenError) {
        console.error('ðŸ”” NotificationService: Push token alma hatasÄ±:', tokenError);
        // Token alÄ±namazsa bile servis Ã§alÄ±ÅŸmaya devam etsin
        console.warn('ðŸ”” NotificationService: Push notification devre dÄ±ÅŸÄ±, yerel bildirimler Ã§alÄ±ÅŸacak');
      }
      
      this.isInitialized = true;
      console.log('ðŸ”” NotificationService: BaÅŸarÄ±yla baÅŸlatÄ±ldÄ±');
      return true;
      
    } catch (error) {
      console.error('ðŸ”” NotificationService: BaÅŸlatma hatasÄ±:', error);
      // Development modunda hatalarÄ± gÃ¶z ardÄ± et
      if (__DEV__) {
        console.warn('ðŸ”” NotificationService: Development modunda hata gÃ¶z ardÄ± edildi');
        this.isInitialized = true;
        return true;
      }
      return false;
    }
  }

  // Push token'Ä± backend'e gÃ¶nder
  async sendTokenToBackend(token) {
    if (!token) {
      console.log('ðŸ”” NotificationService: Token boÅŸ, backend\'e gÃ¶nderilmedi');
      return;
    }

    try {
      console.log('ðŸ”” NotificationService: Token backend\'e gÃ¶nderiliyor...');
      
      // API token'Ä±nÄ± kontrol et
      const userToken = await apiService.getStoredToken();
      
      if (!userToken) {
        console.log('ðŸ”” NotificationService: KullanÄ±cÄ± token\'Ä± yok, backend\'e gÃ¶nderilemedi (kullanÄ±cÄ± giriÅŸ yapmamÄ±ÅŸ olabilir)');
        return;
      }
      
      // API token'Ä±nÄ± set et
      apiService.setToken(userToken);
      
      // Backend'e gÃ¶nder
      const response = await apiService.post('/notifications/register-token', {
        pushToken: token,
        platform: Platform.OS
      });
      
      if (response?.success) {
        console.log('ðŸ”” NotificationService: Token baÅŸarÄ±yla backend\'e gÃ¶nderildi');
      } else {
        console.warn('ðŸ”” NotificationService: Token gÃ¶nderilemedi:', response?.message || 'Bilinmeyen hata');
      }
    } catch (error) {
      console.error('ðŸ”” NotificationService: Token gÃ¶nderme hatasÄ±:', error.message);
      // Backend hatasÄ± olsa bile servis Ã§alÄ±ÅŸmaya devam etsin
      console.warn('ðŸ”” NotificationService: Backend hatasÄ± gÃ¶z ardÄ± edildi, servis Ã§alÄ±ÅŸmaya devam ediyor');
    }
  }

  // Test bildirimi gÃ¶nder
  async sendTestNotification() {
    try {
      if (!this.isInitialized) {
        console.log('ðŸ”” NotificationService: Servis baÅŸlatÄ±lmamÄ±ÅŸ');
        return false;
      }

      await Notifications.scheduleNotificationAsync({
        content: {
          title: "Test Bildirimi",
          body: "Bu bir test bildirimidir!",
          data: { type: 'test' },
        },
        trigger: { seconds: 1 },
      });

      console.log('ðŸ”” NotificationService: Test bildirimi gÃ¶nderildi');
      return true;
    } catch (error) {
      console.error('ðŸ”” NotificationService: Test bildirimi hatasÄ±:', error);
      return false;
    }
  }

  // Yerel bildirim gÃ¶nder
  async sendLocalNotification(title, body, data = {}) {
    try {
      await Notifications.scheduleNotificationAsync({
        content: {
          title,
          body,
          data,
        },
        trigger: null, // Hemen gÃ¶nder
      });
      
      console.log('ðŸ”” NotificationService: Yerel bildirim gÃ¶nderildi:', title);
      return true;
    } catch (error) {
      console.error('ðŸ”” NotificationService: Yerel bildirim hatasÄ±:', error);
      return false;
    }
  }

  // Bildirim dinleyicisi ekle
  addNotificationListener(listener) {
    return Notifications.addNotificationReceivedListener(listener);
  }

  // Bildirim tÄ±klama dinleyicisi ekle
  addNotificationResponseListener(listener) {
    return Notifications.addNotificationResponseReceivedListener(listener);
  }

  // Bildirim dinleyicisini kaldÄ±r
  removeNotificationListener(subscription) {
    Notifications.removeNotificationSubscription(subscription);
  }

  // TÃ¼m bildirimleri temizle
  async clearAllNotifications() {
    try {
      await Notifications.dismissAllNotificationsAsync();
      console.log('ðŸ”” NotificationService: TÃ¼m bildirimler temizlendi');
      return true;
    } catch (error) {
      console.error('ðŸ”” NotificationService: Bildirim temizleme hatasÄ±:', error);
      return false;
    }
  }

  // Badge sayÄ±sÄ±nÄ± ayarla
  async setBadgeCount(count) {
    try {
      await Notifications.setBadgeCountAsync(count);
      console.log('ðŸ”” NotificationService: Badge sayÄ±sÄ± ayarlandÄ±:', count);
      return true;
    } catch (error) {
      console.error('ðŸ”” NotificationService: Badge ayarlama hatasÄ±:', error);
      return false;
    }
  }

  // Servis durumunu kontrol et
  isServiceInitialized() {
    return this.isInitialized;
  }

  // Expo push token'Ä± al
  getExpoPushToken() {
    return this.expoPushToken;
  }
}

// Singleton instance oluÅŸtur
const notificationService = new NotificationService();

export default notificationService;
